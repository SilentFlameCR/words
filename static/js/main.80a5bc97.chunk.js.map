{"version":3,"sources":["components/Header.js","components/Input.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","Input","onSubmit","this","props","submit","id","type","name","placeholder","Result","input","longestWord","definition","author","words","require","App","state","_callee","e","actualInput","Regex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","testWord","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","RegExp","console","log","_this","setState","undefined","Symbol","iterator","done","length","abrupt","match","t0","return","finish","stop","components_Header","components_Input","components_Result","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80a5bc97.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n    render() {\n        return(\n            <div className=\"header\">\n                <div className=\"row\">\n                    <div className=\"col col-12\">\n                        <h1>Generate the longest word!</h1>\n                        <h3>Excluding letters you don't want</h3>\n                    </div>\n                </div>\n            </div> \n        );\n    }\n}\n\nexport default Header;","import React from 'react';\n\nclass Input extends React.Component {\n    render() {\n        return(\n            <div className=\"input\">\n                \n                    \n                <form onSubmit={this.props.submit}>\n                   \n                    <div className=\"row\">\n                       \n                        <div className=\"col col-12\">\n                            <input id=\"actual-input\" type=\"text\" name=\"words\" placeholder=\"type the letters you don't want here with no spaces eg. abcd\"></input>\n                        </div>\n                        <div className=\"col col-12 offset-md-3 col-md-6\">\n                            <button>Longest word me!</button>\n                        </div>\n                        \n                    </div>\n                    \n                </form>\n                    \n                \n            </div> \n        );\n    }\n}\n\nexport default Input;","import React from 'react';\n\nclass Result extends React.Component {\n    \n    render() {\n        \n        return(\n            <div className=\"result\">\n                <div className=\"row\">\n                    <div className=\"col col-12\">\n                       \n                        { \n                            this.props.input && \n                            <p>The following letters were left out to make this longest word: <span>{this.props.input}</span></p>\n                        \n                        }\n                    </div>\n                    <div className=\"col col-12\">\n                        {\n                            this.props.longestWord &&\n                            <p className=\"long\">{this.props.longestWord}</p>\n                        }\n                    </div>\n                    /*<div className=\"col col-12\">\n                        {\n                            this.props.definition &&\n                            <p className=\"long\">{this.props.definition}</p>\n                        }\n                    </div>\n                    <div className=\"col col-12\">\n                        {\n                            this.props.author &&\n                            <p className=\"long\"> -- By, {this.props.author}</p>\n                        }\n                    </div>*/\n                    \n                        \n                    \n                </div>\n            </div> \n        );\n    }\n}\n\nexport default Result;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport Header from './components/Header.js';\nimport Input from './components/Input.js';\nimport Result from './components/Result.js';\nconst words = require('an-array-of-english-words');\n\nclass App extends React.Component {\n    \n  state = {\n      input: \"\",\n      words: \"\",\n      longestWord: \"\",\n      definition: \"\",\n      author: \"\"\n  }\n    \n  submit = async (e) => {\n      e.preventDefault();\n      \n      let actualInput = e.target.elements.words.value;\n      let Regex = new RegExp(\"[\" + actualInput + \"]\", \"g\");\n      console.log(words);\n      \n      this.setState({\n         input: actualInput,\n         words: words,\n         \n      });\n      \n      /*var badLetters = /[gkmqvwxz]/;*/\n      var longestWord = \"\";\n      \n      for(var testWord of words) {\n          if(testWord.length <= longestWord.length){\n              continue;\n          }\n          \n          if(testWord.match(Regex)){\n              continue;\n          }\n          \n          longestWord = testWord;\n          \n      }\n      \n      this.setState({\n          longestWord: longestWord,\n      })\n      \n      /*var API_KEY;\n      var api_call = await fetch(`https://api.wordnik.com/v4/word.json/${this.state.longestWord}/definitions?limit=200&includeRelated=false&useCanonical=false&includeTags=false&api_key=${API_KEY}`);\n      var data = await api_call.json();\n      \n      this.setState({\n          definition: data[0].text,\n          author: data[0].attributionText,\n      });\n      \n      console.log(this.state.definition + \"\\n\" + this.state.author);*/\n  }\n    \n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Input submit={this.submit} />\n        <Result \n            input={this.state.input}\n            longestWord={this.state.longestWord}\n            /*definition={this.state.definition}\n            author={this.state.author}*/\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}